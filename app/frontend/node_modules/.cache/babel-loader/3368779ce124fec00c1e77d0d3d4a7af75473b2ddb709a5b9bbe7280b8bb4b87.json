{"ast":null,"code":"import axios from \"axios\";\nconst options = {\n  baseUrl: process.env.VUE_APP_BASEURL,\n  key: process.env.VUE_APP_KEY,\n  username: process.env.VUE_APP_USERNAME,\n  userKey: process.env.VUE_APP_USERKEY,\n  issueType: process.env.VUE_APP_ISSUETYPE,\n  environment: process.env.NODE_ENV\n};\nexport default class ErrorService {\n  static async initHandler(opts) {\n    // handle null options scenario\n\n    // initialize options\n    Object.assign(options, opts);\n\n    // wait for validation results\n    // Can be acheived by callback functions, promises, async/await\n    // Callback function -> callback hell\n    // validate options\n    await this.validateOptions();\n\n    // initialization\n    this.client = axios.create({\n      baseURL: options.baseUrl,\n      auth: {\n        username: options.username,\n        userKey: options.userKey\n      }\n    });\n  }\n  static validateOptions() {\n    // check environment variable\n    // if required options are missing, throw error \n    // and the service should not be useable\n    if (!options.baseUrl) {\n      throw new Error(\"The 'baseUrl' option is required\");\n    }\n    if (!options.key) {\n      throw new Error(\"The 'key' option is required\");\n    }\n    if (!options.username) {\n      throw new Error(\"The 'username' option is required\");\n    }\n    if (!options.userKey) {\n      throw new Error(\"The 'userKey' option is required\");\n    }\n  }\n  static async createJiraTicket(paylaod = {}) {\n    return await this.client.post(`https://demo.local.com/api/issues`, paylaod);\n  }\n  static async onError(err) {\n    console.log(\"ErrorService.onError:\", err.message());\n    const payload = {\n      baseUrl: process.env.VUE_APP_BASEURL,\n      key: process.env.VUE_APP_KEY,\n      username: process.env.VUE_APP_USERNAME,\n      userKey: process.env.VUE_APP_USERKEY,\n      issueType: process.env.VUE_APP_ISSUETYPE,\n      summary: err,\n      stacktrace: \"\",\n      environment: \"development\"\n    };\n    let response = await this.createJiraTicket(payload);\n    console.log(\"response:\", response);\n\n    // Send Error to backend service\n    // const jiraData = {\n    //   summary: err.message,\n    //   stacktrace: err.stack.toString(),\n    //   ...options\n    // };\n\n    // console.log(\"SENDING ERROR DATA\", jiraData);\n\n    // this.client.post(`https://demo.local.com/api/issues`, jiraData)\n    //   .then(response => {\n    //     console.log('JIRA ticket created successfully', response)\n    //   })\n    //   .catch(error => {\n    //     console.error('Error creating JIRA ticket:', error)\n    //   });\n\n    // this.client.post(\"errorgene.atlassian.net/rest/api/2/issue\", {\n    //   fields: {\n    //     project: {\n    //       key: jiraData.key\n    //     },\n    //     summary: jiraData.summary,\n    //     description: jiraData.stacktrace,\n    //     issuetype: {\n    //       id: jiraData.issueType\n    //     }\n    //   }\n    // })\n    //   .then(function (response) {\n    //     console.log(\"Error reported to JIRA with issue key \" + response.data.key);\n    //   })\n    //   .catch(function (error) {\n    //     console.log(\"Error reporting error to JIRA: \" + error);\n    //   });\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
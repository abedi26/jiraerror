{"ast":null,"code":"import axios from \"axios\";\nconst options = {\n  baseUrl: process.env.VUE_APP_BASEURL,\n  key: process.env.VUE_APP_KEY,\n  username: process.env.VUE_APP_USERNAME,\n  userKey: process.env.VUE_APP_USERKEY,\n  issueType: process.env.VUE_APP_ISSUETYPE,\n  environment: process.env.NODE_ENV\n};\nexport default class ErrorService {\n  static async initHandler(opts) {\n    // handle null options scenario\n\n    // initialize options\n    Object.assign(options, opts);\n\n    // wait for validation results\n    // Can be achieved by callback functions, promises, async/await\n    // Callback function -> callback hell\n    // validate options\n    await this.validateOptions();\n\n    // initialization\n    this.client = axios.create({\n      baseURL: options.baseUrl,\n      auth: {\n        username: options.username,\n        password: options.userKey\n      }\n    });\n  }\n  static validateOptions() {\n    // check environment variable\n    // if required options are missing, throw error\n    // and the service should not be usable\n    if (!options.baseUrl) {\n      throw new Error(\"The 'baseUrl' option is required\");\n    }\n    if (!options.key) {\n      throw new Error(\"The 'key' option is required\");\n    }\n    if (!options.username) {\n      throw new Error(\"The 'username' option is required\");\n    }\n    if (!options.userKey) {\n      throw new Error(\"The 'userKey' option is required\");\n    }\n    if (!options.issueType) {\n      throw new Error(\"The 'issueType' option is required\");\n    }\n    if (!options.environment) {\n      throw new Error(\"The 'environment' option is required\");\n    }\n  }\n  static async createJiraTicket(payload = {}) {\n    const {\n      summary,\n      description,\n      stacktrace\n    } = payload;\n    const jiraPayload = {\n      fields: {\n        summary,\n        description,\n        issuetype: {\n          name: options.issueType\n        },\n        project: {\n          key: options.key\n        },\n        labels: [\"bug\", options.environment]\n      }\n    };\n    const response = await this.client.post(\"https://demo.local.com/api/issues\", jiraPayload);\n    return response.data;\n  }\n  static async onError(err) {\n    const errorPayload = {\n      summary: err.message,\n      description: err.stack,\n      stacktrace: err.stack\n    };\n    try {\n      const response = await this.createJiraTicket(errorPayload);\n      console.log(\"JIRA Ticket created with ID: \", response.key);\n    } catch (error) {\n      console.error(\"Failed to create JIRA ticket: \", error);\n    }\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
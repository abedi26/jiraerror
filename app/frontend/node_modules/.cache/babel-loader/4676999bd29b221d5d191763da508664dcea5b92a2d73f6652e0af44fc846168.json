{"ast":null,"code":"import axios from 'axios';\nconst options = {\n  baseUrl: process.env.VUE_APP_BASEURL,\n  key: process.env.VUE_APP_KEY,\n  username: process.env.VUE_APP_USERNAME,\n  userKey: process.env.VUE_APP_USERKEY,\n  issueType: process.env.VUE_APP_ISSUETYPE,\n  environment: process.env\n};\nexport default class ErrorService {\n  static async initHandler(opts) {\n    Object.assign(options, opts);\n    try {\n      await this.validateOptions();\n      this.client = axios.create({\n        baseURL: options.baseUrl,\n        auth: {\n          username: options.username,\n          password: options.userKey\n        }\n      });\n    } catch (error) {\n      console.error('Error initializing error handler:', error);\n    }\n  }\n  static async validateOptions() {\n    if (!options.baseUrl) {\n      throw new Error(\"The 'baseUrl' option is required\");\n    }\n    if (!options.key) {\n      throw new Error(\"The 'key' option is required\");\n    }\n    if (!options.username) {\n      throw new Error(\"The 'username' option is required\");\n    }\n    if (!options.userKey) {\n      throw new Error(\"The 'userKey' option is required\");\n    }\n    if (!options.issueType) {\n      throw new Error(\"The 'issueType' option is required\");\n    }\n  }\n  static async createJiraTicket(payload = {}) {\n    try {\n      const response = await this.client.post(`/rest/api/2/issue`, payload);\n      return response.data;\n    } catch (error) {\n      console.error('Error creating Jira ticket:', error);\n    }\n  }\n  static async onError(err) {\n    const errorPayload = {\n      summary: err.message,\n      description: err.stack || err.response.data || '',\n      issueType: options.issueType,\n      environment: options.environment\n    };\n    try {\n      await this.createJiraTicket(errorPayload);\n    } catch (error) {\n      console.error('Error creating Jira ticket:', error);\n    }\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
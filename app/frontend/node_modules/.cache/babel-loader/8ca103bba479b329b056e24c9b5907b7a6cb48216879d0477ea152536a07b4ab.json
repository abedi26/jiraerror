{"ast":null,"code":"import axios from \"axios\";\nconst options = {\n  baseUrl: process.env.VUE_APP_BASEURL,\n  key: process.env.VUE_APP_KEY,\n  username: process.env.VUE_APP_USERNAME,\n  userKey: process.env.VUE_APP_USERKEY,\n  issueType: process.env.VUE_APP_ISSUETYPE,\n  environment: process.env\n};\nexport default class ErrorService {\n  static async initHandler(opts) {\n    // handle null options scenario\n\n    // initialize options\n    Object.assign(options, opts);\n\n    // wait for validation results\n    // Can be achieved by callback functions, promises, async/await\n    // Callback function -> callback hell\n    // validate options\n    await this.validateOptions();\n\n    // initialization\n    this.client = axios.create({\n      baseURL: options.baseUrl,\n      auth: {\n        username: options.username,\n        userKey: options.userKey\n      }\n    });\n  }\n  static validateOptions() {\n    // check environment variable\n    // if required options are missing, throw error \n    // and the service should not be useable\n    if (!options.baseUrl) {\n      throw new Error(\"The 'baseUrl' option is required\");\n    }\n    if (!options.key) {\n      throw new Error(\"The 'key' option is required\");\n    }\n    if (!options.username) {\n      throw new Error(\"The 'username' option is required\");\n    }\n    if (!options.userKey) {\n      throw new Error(\"The 'userKey' option is required\");\n    }\n  }\n  static async createJiraTicket(payload = {}) {\n    return await this.client.post(`https://demo.local.com/api/issues`, payload);\n  }\n  static async onError(err) {\n    let errorPayload = {\n      message: err.message,\n      status: err.response.status,\n      stacktrace: err.response.data\n    };\n    const payload = {\n      baseUrl: process.env.VUE_APP_BASEURL,\n      key: process.env.VUE_APP_KEY,\n      username: process.env.VUE_APP_USERNAME,\n      userKey: process.env.VUE_APP_USERKEY,\n      issueType: process.env.VUE_APP_ISSUETYPE,\n      environment: process.env.NODE_ENV,\n      summary: errorPayload.message,\n      description: JSON.stringify(errorPayload)\n    };\n    let response = await this.createJiraTicket(payload);\n    console.log(\"response:\", response);\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
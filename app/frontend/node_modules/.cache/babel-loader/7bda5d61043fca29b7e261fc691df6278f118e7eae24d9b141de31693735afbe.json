{"ast":null,"code":"// import axios from \"axios\";\n\n// const options = {\n//   baseUrl: null, // required\n//   key: null, // required\n//   username: null, // required\n//   userKey: null, // required\n//   issueType: \"10003\"\n\n// }\n\n// export default class ErrorService {\n//   static initHandler(opts) {\n\n//     // initlize options\n\n//     // validate options\n\n//     // initilization\n//      this.client = axios.create({\n//       baseURL: opts.baseUrl,\n//     });\n//   }\n\n//   static validateOptions() {\n\n//     // check environment variable\n//     // if required options are missing, throw error\n//     // and the service should not be useable\n\n//   }\n\n//   static onError() {\n//     // Send Error ro backend service  \n//     // Axios.post()\n//     this.client.post();\n//   }\n\n// }\n\nimport axios from \"axios\";\nconst options = {\n  baseUrl: process.env.VUE_APP_BASEURL,\n  key: process.env.VUE_APP_KEY,\n  username: process.env.VUE_APP_USERNAME,\n  userKey: process.env.VUE_APP_USERKEY,\n  issueType: process.env.VUE_APP_ISSUETYPE\n};\nexport default class ErrorService {\n  static initHandler(opts) {\n    // initialize options\n    Object.assign(options, opts);\n\n    // validate options\n    this.validateOptions();\n\n    // initialization\n    this.client = axios.create({\n      baseURL: options.baseUrl,\n      auth: {\n        username: options.username,\n        userKey: options.userKey\n      }\n    });\n  }\n  static validateOptions() {\n    // check environment variable\n    // if required options are missing, throw error\n    // and the service should not be useable\n    if (!options.baseUrl) {\n      throw new Error(\"The 'baseUrl' option is required\");\n    }\n    if (!options.key) {\n      throw new Error(\"The 'key' option is required\");\n    }\n    if (!options.username) {\n      throw new Error(\"The 'username' option is required\");\n    }\n    if (!options.userKey) {\n      throw new Error(\"The 'userKey' option is required\");\n    }\n  }\n  static onError(errorMessage, stackTrace, metadata) {\n    // Send Error to backend service\n    const jiraData = {\n      key: options.key,\n      issueType: options.issueType,\n      username: options.username,\n      userKey: options.userKey,\n      baseUrl: options.baseUrl,\n      summary: errorMessage,\n      stacktrace: stackTrace,\n      environment: process.env,\n      metadata: metadata\n    };\n    this.client.post(\"errorgene.atlassian.net/rest/api/2/issue\", {\n      fields: {\n        project: {\n          key: jiraData.key\n        },\n        summary: jiraData.summary,\n        description: jiraData.stacktrace,\n        issuetype: {\n          id: jiraData.issueType\n        }\n      }\n    }).then(function (response) {\n      console.log(\"Error reported to JIRA with issue key \" + response.data.key);\n    }).catch(function (error) {\n      console.log(\"Error reporting error to JIRA: \" + error);\n    });\n  }\n}","map":{"version":3,"names":["axios","options","baseUrl","process","env","VUE_APP_BASEURL","key","VUE_APP_KEY","username","VUE_APP_USERNAME","userKey","VUE_APP_USERKEY","issueType","VUE_APP_ISSUETYPE","ErrorService","initHandler","opts","Object","assign","validateOptions","client","create","baseURL","auth","Error","onError","errorMessage","stackTrace","metadata","jiraData","summary","stacktrace","environment","post","fields","project","description","issuetype","id","then","response","console","log","data","catch","error"],"sources":["/var/www/frontend/local_modules/vue-jira-handler/src/handlerService.js"],"sourcesContent":["// import axios from \"axios\";\r\n\r\n// const options = {\r\n//   baseUrl: null, // required\r\n//   key: null, // required\r\n//   username: null, // required\r\n//   userKey: null, // required\r\n//   issueType: \"10003\"\r\n  \r\n// }\r\n\r\n// export default class ErrorService {\r\n//   static initHandler(opts) {\r\n\r\n//     // initlize options\r\n\r\n//     // validate options\r\n\r\n    \r\n//     // initilization\r\n//      this.client = axios.create({\r\n//       baseURL: opts.baseUrl,\r\n//     });\r\n//   }\r\n\r\n//   static validateOptions() {\r\n\r\n//     // check environment variable\r\n//     // if required options are missing, throw error\r\n//     // and the service should not be useable\r\n\r\n//   }\r\n\r\n//   static onError() {\r\n//     // Send Error ro backend service  \r\n//     // Axios.post()\r\n//     this.client.post();\r\n//   }\r\n \r\n// }\r\n\r\nimport axios from \"axios\";\r\n\r\nconst options = {\r\n  baseUrl: process.env.VUE_APP_BASEURL,\r\n  key: process.env.VUE_APP_KEY,\r\n  username: process.env.VUE_APP_USERNAME,\r\n  userKey: process.env.VUE_APP_USERKEY,\r\n  issueType: process.env.VUE_APP_ISSUETYPE  \r\n};\r\n\r\nexport default class ErrorService {\r\n  static initHandler(opts) {\r\n\r\n    // initialize options\r\n    Object.assign(options, opts);\r\n\r\n    // validate options\r\n    this.validateOptions();\r\n\r\n    // initialization\r\n    this.client = axios.create({\r\n      baseURL: options.baseUrl,\r\n      auth: {\r\n        username: options.username,\r\n        userKey: options.userKey\r\n      }\r\n    });\r\n  }\r\n\r\n  static validateOptions() {\r\n    // check environment variable\r\n    // if required options are missing, throw error\r\n    // and the service should not be useable\r\n    if (!options.baseUrl) {\r\n      throw new Error(\"The 'baseUrl' option is required\");\r\n    }\r\n    if (!options.key) {\r\n      throw new Error(\"The 'key' option is required\");\r\n    }\r\n    if (!options.username) {\r\n      throw new Error(\"The 'username' option is required\");\r\n    }\r\n    if (!options.userKey) {\r\n      throw new Error(\"The 'userKey' option is required\");\r\n    }\r\n  }\r\n\r\n  static onError(errorMessage, stackTrace, metadata) {\r\n    // Send Error to backend service\r\n    const jiraData = {\r\n      key: options.key,\r\n      issueType: options.issueType,\r\n      username: options.username,\r\n      userKey: options.userKey,\r\n      baseUrl: options.baseUrl,\r\n      summary: errorMessage,\r\n      stacktrace: stackTrace,\r\n      environment: process.env,\r\n      metadata: metadata\r\n    };\r\n\r\n    this.client.post(\"errorgene.atlassian.net/rest/api/2/issue\", {\r\n      fields: {\r\n        project: {\r\n          key: jiraData.key\r\n        },\r\n        summary: jiraData.summary,\r\n        description: jiraData.stacktrace,\r\n        issuetype: {\r\n          id: jiraData.issueType\r\n        }\r\n      }\r\n    })\r\n      .then(function (response) {\r\n        console.log(\"Error reported to JIRA with issue key \" + response.data.key);\r\n      })\r\n      .catch(function (error) {\r\n        console.log(\"Error reporting error to JIRA: \" + error);\r\n      });\r\n  }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
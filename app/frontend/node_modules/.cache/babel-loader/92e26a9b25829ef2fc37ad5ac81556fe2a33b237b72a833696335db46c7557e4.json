{"ast":null,"code":"import axios from \"axios\";\n\n// const options = {\n//   baseUrl: process.env.VUE_APP_BASEURL,\n//   key: process.env.VUE_APP_KEY,\n//   username: process.env.VUE_APP_USERNAME,\n//   userKey: process.env.VUE_APP_USERKEY,\n//   issueType: process.env.VUE_APP_ISSUETYPE  \n// };\nconst options = {\n  baseUrl: \"A\",\n  key: \"B\",\n  username: \"C\",\n  userKey: \"D\",\n  issueType: \"E\"\n};\nexport default class ErrorService {\n  static initHandler(opts) {\n    // initialize options\n    Object.assign(options, opts);\n\n    // validate options\n    this.validateOptions();\n\n    // initialization\n    this.client = axios.create({\n      baseURL: options.baseUrl,\n      auth: {\n        username: options.username,\n        userKey: options.userKey\n      }\n    });\n  }\n  static validateOptions() {\n    // check environment variable\n    // if required options are missing, throw error \n    // and the service should not be useable\n    if (!options.baseUrl) {\n      throw new Error(\"The 'baseUrl' option is required\");\n    }\n    if (!options.key) {\n      throw new Error(\"The 'key' option is required\");\n    }\n    if (!options.username) {\n      throw new Error(\"The 'username' option is required\");\n    }\n    if (!options.userKey) {\n      throw new Error(\"The 'userKey' option is required\");\n    }\n  }\n  static onError(errorMessage, stackTrace, metadata) {\n    // Send Error to backend service\n    const jiraData = {\n      key: options.key,\n      issueType: options.issueType,\n      username: options.username,\n      userKey: options.userKey,\n      baseUrl: options.baseUrl,\n      summary: errorMessage,\n      stacktrace: stackTrace,\n      environment: process.env,\n      metadata: metadata\n    };\n    this.client.post(\"errorgene.atlassian.net/rest/api/2/issue\", {\n      fields: {\n        project: {\n          key: jiraData.key\n        },\n        summary: jiraData.summary,\n        description: jiraData.stacktrace,\n        issuetype: {\n          id: jiraData.issueType\n        }\n      }\n    }).then(function (response) {\n      console.log(\"Error reported to JIRA with issue key \" + response.data.key);\n    }).catch(function (error) {\n      console.log(\"Error reporting error to JIRA: \" + error);\n    });\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}